/*
 * Forgelin build file.
 */

//================================================
// Pre-execute

buildscript {
    ext {
        // ==[ Variables ]========================
        kotlin_version = "1.1.51"
        mc_version = "1.7.10"
        forge_version = "10.13.4.1564-1.7.10"
        mod_version = "0.1.2"
        // =======================================
    }
    repositories {
        mavenCentral()
        maven {
            name = "Forge"
            url = "http://files.minecraftforge.net/maven"
        }
        // Sonatype (for SpecialSource in 1.7+)
        maven {
            name = "Sonatype Nexus"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT"
    }
}

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.1.51"
}

repositories {
    maven {
        name "Forge"
        url "http://files.minecraftforge.net/maven"
    }
    mavenCentral()
    maven {
        name "MinecraftS3"
        url "http://s3.amazonaws.com/Minecraft.Download/libraries"
    }
}

apply plugin: "forge"

configurations {
    shade
    compile.extendsFrom shade
}

group = "io.drakon"

dependencies {
    shade "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    
    shade "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    shade "org.jetbrains.kotlin:kotlin-runtime:$kotlin_version"
    testCompile "junit:junit:4.+"
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
}

// Setup Forge plugin
minecraft {
    version = mc_version + "-" + forge_version
    runDir = "run"
    replace "@VERSION@", mod_version
    replace "@KOTLIN@", kotlin_version

    //srgExtra "PK: kotlin io/drakon/forgelin/repack/"
    // Note: Despite shading Kotlin, we _don't_ repackage it - this lets other mods use it, and saves us downloading libraries at runtime (ewh)
}

//================================================
// Jar data

// Grab system env
def env = System.getenv()

version = "${mc_version}-${mod_version}-${kotlin_version}"

// Drone manifest
def droneManifest = manifest {
    if (env.DRONE != null) {
        attributes("Drone-Build": "true", "Drone-Build-ID": env.DRONE_BUILD_NUMBER, "Drone-Commit": env.DRONE_COMMIT,
                   "Drone-Branch": env.DRONE_BRANCH, "Drone-Repo-Slug": env.DRONE_REPO_SLUG)
        version += "-d${env.DRONE_BUILD_NUMBER}"
    } else {
        attributes("Drone-Build": "false")
    }
}

// Version manifest
def verManifest = manifest {
    attributes("Mod-Version": mod_version, "Forge-Version": mc_version + "-" + forge_version, "Kotlin-Version": kotlin_version)
}

// FML Core manifest
def fmlManifest = manifest {
	attributes("FMLCorePlugin": "io.drakon.forgelin.CorePlugin", "FMLCorePluginContainsFMLMod": "true")
}

processResources {
    // Make sure this gets re-executed on updates.
    inputs.property "version", version
    inputs.property "MCversion", mc_version
    inputs.property "kotlinver", kotlin_version
    
    // Process mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        include "**/*.info"
        expand "version":mod_version,"MCversion":mc_version,"kotlinver":kotlin_version
    }

    // Copy anything else directly
    from(sourceSets.main.resources.srcDirs) {
        exclude "**/*.info"
    }
}

//================================================
// Jar tasks

jar {
    // Shading
    configurations.shade.each { dep ->
        from(project.zipTree(dep)){
            exclude 'META-INF', 'META-INF/**'
        }
    }

    // Merge Jenkins and Git manifests to form final manifest in final release jar
    manifest {
        from droneManifest, verManifest, fmlManifest
    }
}
sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
}
